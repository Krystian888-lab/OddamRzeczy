{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; // var admin = require(\"firebase-admin\");\n// console.log(admin);\n\nconst config = {\n  apiKey: \"AIzaSyDJBrlcEwrxPOQufSgD-vq3q-JYeu62lNw\",\n  authDomain: \"give-in-good-hands.firebaseapp.com\",\n  databaseURL: \"https://give-in-good-hands.firebaseio.com\",\n  projectId: \"give-in-good-hands\",\n  storageBucket: \"give-in-good-hands.appspot.com\",\n  messagingSenderId: \"428321865411\",\n  appId: \"1:428321865411:web:ef8b756ad292572bab6c76\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // const collectionRef = firestore.collection(\"users\");\n\n  const snapshot = await userRef.get(); // const collectionSnapshot = await collectionRef.get();\n  // console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // add databese with organizations\n\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n\n  if (objectsToAdd === undefined) {\n    return;\n  }\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; // sign in with google\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); // pobieranie danych o organizacjach\n\nexport const convertCollectionsSnapshotToMap = collecions => {\n  const transformCollecion = collecions.docs.map(doc => {\n    const {\n      foundations,\n      goverments,\n      locales\n    } = doc.data();\n    return {\n      id: doc.id,\n      foundations,\n      goverments,\n      locales\n    };\n  });\n  return transformCollecion;\n}; // pobieranie uzytkownikÃ³w\n\nexport const getUsers = collection => {\n  const transformCollecion = collection.docs.map(doc => {\n    const {\n      displayName,\n      email,\n      createdAt\n    } = doc.data();\n    return {\n      id: doc.id,\n      displayName,\n      email,\n      createdAt\n    };\n    console.log(\"\");\n  }); // console.log(transformCollecion);\n\n  return transformCollecion;\n};\nexport const getForms = collection => {\n  const transformCollecion = collection.docs.map(doc => {\n    const {\n      address,\n      bags,\n      collectionDate,\n      helpGroups,\n      localization,\n      localizationSpecific,\n      type,\n      user,\n      createdAt\n    } = doc.data();\n    return {\n      id: doc.id,\n      address,\n      bags,\n      collectionDate,\n      helpGroups,\n      localization,\n      localizationSpecific,\n      type,\n      user,\n      createdAt\n    };\n  });\n  return transformCollecion;\n}; //\n// function listAllUsers(nextPageToken) {\n// \t// List batch of users, 1000 at a time.\n// \tadmin\n// \t\t.auth()\n// \t\t.listUsers(1000, nextPageToken)\n// \t\t.then(function(listUsersResult) {\n// \t\t\tlistUsersResult.users.forEach(function(userRecord) {\n// \t\t\t\tconsole.log(\"user\", userRecord.toJSON());\n// \t\t\t});\n// \t\t\tif (listUsersResult.pageToken) {\n// \t\t\t\t// List next batch of users.\n// \t\t\t\tlistAllUsers(listUsersResult.pageToken);\n// \t\t\t}\n// \t\t})\n// \t\t.catch(function(error) {\n// \t\t\tconsole.log(\"Error listing users:\", error);\n// \t\t});\n// }\n// // Start listing users from the beginning, 1000 at a time.\n// listAllUsers();\n\nexport default firebase;","map":{"version":3,"sources":["/home/krystian/CodersLab_JavaScript_Brudnopis/OddamRzeczyWDobreRece/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","undefined","forEach","obj","newDocRef","commit","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","convertCollectionsSnapshotToMap","collecions","transformCollecion","docs","map","foundations","goverments","locales","data","id","getUsers","getForms","address","bags","collectionDate","helpGroups","localization","localizationSpecific","type","user"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n// var admin = require(\"firebase-admin\");\n// console.log(admin);\n\nconst config = {\n\tapiKey: \"AIzaSyDJBrlcEwrxPOQufSgD-vq3q-JYeu62lNw\",\n\tauthDomain: \"give-in-good-hands.firebaseapp.com\",\n\tdatabaseURL: \"https://give-in-good-hands.firebaseio.com\",\n\tprojectId: \"give-in-good-hands\",\n\tstorageBucket: \"give-in-good-hands.appspot.com\",\n\tmessagingSenderId: \"428321865411\",\n\tappId: \"1:428321865411:web:ef8b756ad292572bab6c76\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\tif (!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\t// const collectionRef = firestore.collection(\"users\");\n\n\tconst snapshot = await userRef.get();\n\t// const collectionSnapshot = await collectionRef.get();\n\t// console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\n\n\tif (!snapshot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(\"error creating user\", error.message);\n\t\t}\n\t}\n\n\treturn userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\n\nexport const firestore = firebase.firestore();\n\n// add databese with organizations\nexport const addCollectionsAndDocuments = async (\n\tcollectionKey,\n\tobjectsToAdd\n) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\tconst batch = firestore.batch();\n\n\tif (objectsToAdd === undefined) {\n\t\treturn;\n\t}\n\tobjectsToAdd.forEach((obj) => {\n\t\tconst newDocRef = collectionRef.doc();\n\n\t\tbatch.set(newDocRef, obj);\n\t});\n\n\treturn await batch.commit();\n};\n\n// sign in with google\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\n// pobieranie danych o organizacjach\n\nexport const convertCollectionsSnapshotToMap = (collecions) => {\n\tconst transformCollecion = collecions.docs.map((doc) => {\n\t\tconst { foundations, goverments, locales } = doc.data();\n\n\t\treturn {\n\t\t\tid: doc.id,\n\t\t\tfoundations,\n\t\t\tgoverments,\n\t\t\tlocales\n\t\t};\n\t});\n\n\treturn transformCollecion;\n};\n\n// pobieranie uzytkownikÃ³w\n\nexport const getUsers = (collection) => {\n\tconst transformCollecion = collection.docs.map((doc) => {\n\t\tconst { displayName, email, createdAt } = doc.data();\n\n\t\treturn {\n\t\t\tid: doc.id,\n\t\t\tdisplayName,\n\t\t\temail,\n\t\t\tcreatedAt\n\t\t};\n\n\t\tconsole.log(\"\");\n\t});\n\t// console.log(transformCollecion);\n\treturn transformCollecion;\n};\nexport const getForms = (collection) => {\n\tconst transformCollecion = collection.docs.map((doc) => {\n\t\tconst {\n\t\t\taddress,\n\t\t\tbags,\n\t\t\tcollectionDate,\n\t\t\thelpGroups,\n\t\t\tlocalization,\n\t\t\tlocalizationSpecific,\n\t\t\ttype,\n\t\t\tuser,\n\t\t\tcreatedAt\n\t\t} = doc.data();\n\n\t\treturn {\n\t\t\tid: doc.id,\n\t\t\taddress,\n\t\t\tbags,\n\t\t\tcollectionDate,\n\t\t\thelpGroups,\n\t\t\tlocalization,\n\t\t\tlocalizationSpecific,\n\t\t\ttype,\n\t\t\tuser,\n\t\t\tcreatedAt\n\t\t};\n\t});\n\n\treturn transformCollecion;\n};\n\n//\n// function listAllUsers(nextPageToken) {\n// \t// List batch of users, 1000 at a time.\n// \tadmin\n// \t\t.auth()\n// \t\t.listUsers(1000, nextPageToken)\n// \t\t.then(function(listUsersResult) {\n// \t\t\tlistUsersResult.users.forEach(function(userRecord) {\n// \t\t\t\tconsole.log(\"user\", userRecord.toJSON());\n// \t\t\t});\n// \t\t\tif (listUsersResult.pageToken) {\n// \t\t\t\t// List next batch of users.\n// \t\t\t\tlistAllUsers(listUsersResult.pageToken);\n// \t\t\t}\n// \t\t})\n// \t\t.catch(function(error) {\n// \t\t\tconsole.log(\"Error listing users:\", error);\n// \t\t});\n// }\n// // Start listing users from the beginning, 1000 at a time.\n// listAllUsers();\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}